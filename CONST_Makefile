# TO BE SET ACCORDINGLY TO YOUR ENVIRONNEMENT IN THE MAKE FILE
VENV_BIN ?= .build/venv/Scripts

PYTHON_VERSION = $(shell $(VENV_BIN)/python -c "import sys; print('%i.%i' % (sys.version_info.major, sys.version_info.minor))" 2> /dev/null)

PACKAGE = crdppfportal
SUB_PROJECT = crdppf_core
SUB_PACKAGE = $(SUB_PROJECT)/crdppf

DEVELOPMENT = FALSE

PIP_CMD ?= $(VENV_BIN)/pip
PIP_INSTALL_ARGS += install
PIP_VERSION ?= pip>=9
SETUPTOOL_VERSION ?= setuptools>=36


OUTPUT_DIR = $(SUB_PACKAGE)/static/build

# Make rules

# Requirements
CONST_REQUIREMENT ?= $(SUB_PROJECT)/CONST_requirements.txt

CONST_REQUIREMENT_LOCAL_FILE ?= CONST_requirements.txt

EGGS_DEPENDENCIES += .build/venv.timestamp-noclean .build/crdppf_core.timestamp $(CONST_REQUIREMENT_LOCAL_FILE) setup.py $(CONST_REQUIREMENT) $(SUB_PROJECT)/setup.py $(SUB_PROJECT)/CONST_versions.txt

REQUIREMENTS += -r $(CONST_REQUIREMENT)


TEMPLATES_FILES = $(shell find $(PACKAGE)/templates -type f -print) $(shell find $(SUB_PACKAGE)/templates -type f -print)

# Templates
TEMPLATE_EXCLUDE += .build $(PACKAGE)/static $(SUB_PACKAGE)/static $(SUB_PACKAGE)/templates $(PACKAGE)/templates

FIND_OPTS = $(foreach ELEM, $(TEMPLATE_EXCLUDE),-path ./$(ELEM) -prune -o) -type f
TEMPLATE_FILES = $(shell find $(FIND_OPTS) -name "*.in" -print)
MAKO_FILES = $(shell find $(FIND_OPTS) -name "*.mako" -print)
JINJA_FILES = $(shell find $(FIND_OPTS) -name "*.jinja" -print)
VARS_FILES += $(SUB_PROJECT)/CONST_vars.yaml
VARS_DEPENDS += $(VARS_FILES)

CONFIG_VARS += \
	sqlalchemy.url \
	instanceid \
	development \
	specific_root_dir \
	database.cfg \
	tile_date_file \
	ch_wms \
	default_language \
	fulltextsearch_url \
	defaultTiles \
	mapproxyurl \
	mapMatrixSet \
	mapExtent \
	mapMaxExtent \
	mapCenter \
	mapSRS \
	mapResolutions \
	mapMatrixSet \
	mapOverviewExtent \
	mapOverviewSizeW \
	mapOverviewSizeH \
	keymap \
	crdppf_wms \
	authtkt_cookie_name \
	authtkt_secret \
	disclaimer \
	jsbuild_root_dir \
	jsbuild_cfg \
	pdf.cfg \
	logon

APACHE_ENTRY_POINT ?= /$(INSTANCE_ID)/

ENVIRONMENT_VARS += INSTANCE_ID=${INSTANCE_ID} \
	APACHE_ENTRY_POINT=$(APACHE_ENTRY_POINT) \
	DEVELOPMENT=${DEVELOPMENT} \
	PACKAGE=${PACKAGE} \
	SUB_PACKAGE=${SUB_PACKAGE}

C2C_TEMPLATE_CMD = $(ENVIRONMENT_VARS) $(VENV_BIN)/c2c-template --vars $(VARS_FILE)
MAKE_FILES = $(shell ls -1 *.mk) $(SUB_PROJECT)/CONST_Makefile
PY_FILES = $(shell find $(PACKAGE) -type f -name '*.py' -print)

JSBUILD_MAIN_FILES = $(shell find $(SUB_PACKAGE)/static/lib $(SUB_PACKAGE)/static/js -name "*.js" -print 2> /dev/null)
JSBUILD_MAIN_CONFIG = $(SUB_PROJECT)/jsbuild/app.cfg
JSBUILD_MAIN_OUTPUT_FILES ?= crdppf.js
JSBUILD_MAIN_OUTPUT_FILES := $(addprefix $(OUTPUT_DIR)/, $(JSBUILD_MAIN_OUTPUT_FILES))

DEFAULT_BUILD_RULES ?= .build/requirements.timestamp update-git-submodules build-javascript build-server
DEFAULT_BUILD_RULES += print
BUILD_RULES ?= $(PRE_RULES) $(filter-out $(DISABLE_BUILD_RULES),$(DEFAULT_BUILD_RULES)) $(POST_RULES)


# Print variables
TOMCAT_START_COMMAND ?= net START Tomcat8
TOMCAT_STOP_COMMAND ?= net STOP Tomcat8
PRINT_TMP = tmp
PRINT_BASE_DIR ?= $(SUB_PROJECT)/print
PRINT_WAR ?= print-$(INSTANCE_ID).war
PRINT_OUTPUT ?= D:/Applications/ApacheTomcat/webapps
PRINT_OUTPUT_WAR = $(PRINT_OUTPUT)/$(PRINT_WAR)
PRINT_BASE_WAR ?= print-servlet.war
PRINT_INPUT += print-apps WEB-INF

PRINT_REQUIREMENT += \
	$(PRINT_BASE_DIR)/WEB-INF/lib/Cadastra.jar \
	$(shell find $(PRINT_BASE_DIR)/print-apps)

PRINT_REQUIREMENT += $(PRINT_BASE_DIR)/$(PRINT_BASE_WAR)


# Disabling Make built-in rules to speed up execution time
.SUFFIXES:

.PHONY: help
help:
	@echo  "Usage: make <target>"
	@echo
	@echo  "Main targets:"
	@echo
	@echo  "- build			Build and configure the project"
	@echo  "- update-git-submodules	Update and clean the Git submodules"
	@echo  "- clean			Remove generated files"
	@echo  "- cleanall		Remove all the build artefacts"
ifdef UTILITY_HELP
	@echo $(UTILITY_HELP)
endif
	@echo
	@echo  "Secondary targets:"
	@echo
	@echo  "- build-javascript	Build the javascript"
	@echo  "- template-clean	Clean the template file"
	@echo  "- template-generate	Generate the template file"
	@echo  "- print	Generate the print templates"
ifdef SECONDARY_HELP
	@echo $(SECONDARY_HELP)
endif
	@echo

.PHONY: build
build: $(BUILD_RULES)

.PHONY: build-server
build-server: template-generate

.PHONY: clean
clean: template-clean
	rm -f .build/*.timestamp
	rm -f $(APACHE_CONF_DIR)/$(INSTANCE_ID).conf

.PHONY: cleanall
cleanall: clean
	rm -rf .build

.PHONY: checks
checks: flake8 $(CLIENT_CHECK_RULE) $(WEB_RULE)

.PHONY: flake8
flake8: $(VENV_BIN)/flake8
	$(VENV_BIN)/flake8 $(PACKAGE)

.PHONY: echostuff
echostuff:
	@echo $(MAKO_FILES:.mako=)

# Templates
.PHONY: template-clean
template-clean:
	rm -f $(TEMPLATE_FILES:.in=)
	rm -f $(MAKO_FILES:.mako=)
	rm -f $(JINJA_FILES:.jinja=)
	rm -f .build/config.yaml

.PHONY: template-generate
template-generate: $(TEMPLATE_FILES:.in=) $(MAKO_FILES:.mako=) $(JINJA_FILES:.jinja=) .build/config.yaml

$(TEMPLATE_FILES:.in=) $(MAKO_FILES:.mako=) $(JINJA_FILES:.jinja=): $(VENV_BIN)/c2c-template $(VARS_DEPENDS)

%: %.in $(INSTANCE_ID_MARKER)
ifeq ($(origin VARS_FILE), undefined)
	@echo "Error: the variable VARS_FILE is required."
	exit 1
endif
	$(C2C_TEMPLATE_CMD) --engine template --files $<

%: %.mako $(INSTANCE_ID_MARKER)
ifeq ($(origin VARS_FILE), undefined)
	@echo "Error: the variable VARS_FILE is required."
	exit 1
endif
	@echo $(C2C_TEMPLATE_CMD)
	$(C2C_TEMPLATE_CMD) --engine mako --files $<

%: %.jinja $(INSTANCE_ID_MARKER)
ifeq ($(origin VARS_FILE), undefined)
	@echo "Error: the variable VARS_FILE is required."
	exit 1
endif
	$(C2C_TEMPLATE_CMD) --engine jinja --files $<

.build/config.yaml: $(INSTANCE_ID_MARKER) $(VENV_BIN)/c2c-template $(VARS_DEPENDS) $(MAKE_FILES)
	$(C2C_TEMPLATE_CMD) --get-config .build/config.yaml $(CONFIG_VARS)

$(VENV_BIN)/flake8: .build/requirements.timestamp

# Venv

.build/venv.timestamp-noclean:
	mkdir -p $(dir $@)
	python -m venv --system-site-packages .build/venv
	.build/venv/Scripts/python -m pip install --upgrade pip
	touch $@

.build/requirements.timestamp: $(EGGS_DEPENDENCIES)
	$(VENV_BIN)/python -m pip install $(REQUIREMENTS) $(PIP_REDIRECT)
	$(VENV_BIN)/python -m pip install --editable=crdppf_core
	$(VENV_BIN)/python -m compileall -q .build/venv 2&>/dev/null|| true
	$(VENV_BIN)/python -m compileall -q crdppf_core 2&>/dev/null|| true
	touch $@

.build/crdppf_core.timestamp:
	$(VENV_BIN)/python -m pip install -r $(CONST_REQUIREMENT_LOCAL_FILE)
	$(VENV_BIN)/python -m pip install -r $(CONST_REQUIREMENT)
	touch $@

.PHONY: build-javascript
build-javascript: .build/jsbuild.timestamp

.build/jsbuild.timestamp: $(JSBUILD_MAIN_FILES) $(JSBUILD_MAIN_CONFIG)
	mkdir -p $(OUTPUT_DIR)
	$(VENV_BIN)/jsbuild $(JSBUILD_MAIN_CONFIG) -o $(OUTPUT_DIR)
	touch $@


.PHONY: update-git-submodules
update-git-submodules:  .build/git-submodules.timestamp

.build/git-submodules.timestamp: 
	cd $(SUB_PROJECT) && git submodule sync
	cd $(SUB_PROJECT) && git submodule update --init
	touch $@

# Print

.PHONY: print
print: $(PRINT_OUTPUT)/$(PRINT_WAR)

$(PRINT_OUTPUT)/$(PRINT_WAR): $(PRINT_REQUIREMENT)
# If Linux else windows
ifeq ($(VENV_BIN), .build/venv/bin)
	cp $(PRINT_BASE_DIR)/$(PRINT_BASE_WAR) /$(PRINT_TMP)/$(PRINT_WAR)
	cd $(PRINT_BASE_DIR) && jar -uf /$(PRINT_TMP)/$(PRINT_WAR) $(PRINT_INPUT)
	chmod g+r,o+r /$(PRINT_TMP)/$(PRINT_WAR)
else
	mkdir -p $(PRINT_BASE_DIR)/$(PRINT_TMP)
	cp $(PRINT_BASE_DIR)/$(PRINT_BASE_WAR) $(PRINT_BASE_DIR)/$(PRINT_TMP)/$(PRINT_WAR)
	cd $(PRINT_BASE_DIR) && jar -uf $(PRINT_TMP)/$(PRINT_WAR) $(PRINT_INPUT)
endif

ifneq ($(TOMCAT_STOP_COMMAND),)
	$(TOMCAT_STOP_COMMAND)
endif
	$(TOMCAT_OUTPUT_CMD_PREFIX) rm -f $(PRINT_OUTPUT)/$(PRINT_WAR)
	$(TOMCAT_OUTPUT_CMD_PREFIX) rm -rf $(PRINT_OUTPUT)/$(PRINT_WAR:.war=)
# If Linux else windows
ifeq ($(VENV_BIN), .build/venv/bin)
	$(TOMCAT_OUTPUT_CMD_PREFIX) cp /$(PRINT_TMP)/$(PRINT_WAR) $(PRINT_OUTPUT)
	rm -f /$(PRINT_TMP)/$(PRINT_WAR)
else
	mv $(PRINT_BASE_DIR)/$(PRINT_TMP)/$(PRINT_WAR) $(PRINT_OUTPUT)
	cd $(PRINT_BASE_DIR) && rm -fd $(PRINT_TMP)
endif
ifneq ($(TOMCAT_START_COMMAND),)
	$(TOMCAT_START_COMMAND)
endif
	touch $@